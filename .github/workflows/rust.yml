name: Rust

on:
  push:
    branches: [main]
    tags:
      - "mdi/v*"
      - "octicons/v*"
      - "fontawesome/v*"
      - "simple-icons/v*"
    paths:
      - crates/**
      - .github/workflows/rust.yml
      - "!crates/*/deno.json"
      - "!crates/*/main.ts"
      - "!crates/*/pyproject.toml"
      - Cargo.toml
  pull_request:
    branches: [main]
    paths:
      - crates/**
      - .github/workflows/rust.yml
      - "!crates/*/deno.json"
      - "!crates/*/main.ts"
      - "!crates/*/pyproject.toml"
      - Cargo.toml

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: "~/.cargo"
          key: cargo-doc-${{ hashFiles('Cargo.lock') }}
      - run: cargo clippy
      - run: cargo fmt --check

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: rustup update --no-self-update
      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: "~/.cargo"
          key: cargo-doc-${{ hashFiles('Cargo.lock') }}
      - run: cargo doc --no-deps --lib
      - name: Upload docs as artifact
        uses: actions/upload-artifact@v4
        with:
          path: target/doc
          name: rust-docs

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: rustup update --no-self-update
      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: "~/.cargo"
          key: cargo-test-${{ hashFiles('Cargo.lock') }}
      - run: cargo test

  release:
    needs: [lint, doc, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: ["mdi", "octicons", "fontawesome", "simple-icons"]
    steps:
      - uses: actions/checkout@v5
      - run: rustup update --no-self-update
      - name: Setup nushell
        uses: hustcer/setup-nu@985d59ec83ae3e3418f9d36471cda38b9d8b9879 # v3.20
        with:
          version: ${{ vars.NU_SHELL_VERSION || '*' }}
      - name: Get package name
        id: translate
        shell: nu {0}
        run: |-
          let name = (
            open "${{ github.workspace }}/crates/${{ matrix.pkg }}/Cargo.toml"
            | get package
            | get name
          )
          $"pkg=($name)\n" | save --append $env.GITHUB_OUTPUT
      - name: Package crate ${{ steps.translate.outputs.pkg }} (dry run)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: cargo package -p ${{ steps.translate.outputs.pkg }}
      - name: Publish crate ${{ steps.translate.outputs.pkg }}
        if: startsWith(github.ref, 'refs/tags/') && startsWith(github.ref_name, matrix.pkg)
        run: cargo publish -p ${{ steps.translate.outputs.pkg }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
